import asyncio
import logging
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN, CHAT_ID, CHECK_INTERVAL, LOG_FILE
from checker import fetch_tariffs, filter_tariffs, format_tariff

logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) ---
root_logger = logging.getLogger()
if not root_logger.handlers:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(LOG_FILE),
            logging.StreamHandler()
        ]
    )
# —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º logger
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

last_available = set()
_check_task = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏


async def check_tariffs():
    global last_available
    while True:
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
            data = await fetch_tariffs()
            filtered = filter_tariffs(data)

            available_now = {t["id"]: t for t in filtered if t["availability"]}

            new_ids = set(available_now.keys()) - set(last_available)
            if new_ids:
                msg = "üöÄ –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n" + "\n\n".join(
                    format_tariff(available_now[i]) for i in new_ids
                ) + "\n\nüîó GitHub: https://github.com/fxfuren"
                await bot.send_message(CHAT_ID, msg)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_ids)} –Ω–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ set –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            last_available = set(available_now.keys())

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


async def run_bot():
    global _check_task

    # –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç, —á—Ç–æ –±–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
    try:
        await bot.send_message(CHAT_ID, "üü¢ Play2Go Tariff Bot –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤.")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if _check_task is None or _check_task.done():
        _check_task = asyncio.create_task(check_tariffs())
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_tariffs –∑–∞–ø—É—â–µ–Ω–∞.")
    else:
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ–≤–∞—è –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è.")

    await dp.start_polling(bot)
