import asyncio
import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN, CHAT_ID, CHECK_INTERVAL, LOG_FILE

from checker import fetch_tariffs, filter_tariffs, format_tariff

logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
root_logger = logging.getLogger()
if not root_logger.handlers:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(LOG_FILE),
            logging.StreamHandler()
        ]
    )
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

STATUS_FILE = Path("status.json")
last_status = {}  # –∫–ª—é—á: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∑–Ω–∞—á–µ–Ω–∏–µ: availability
_check_task = None


def tariff_key(t):
    """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    return f"{t['id']}-{t['name']}-{t['location_name']}"


def load_status():
    global last_status
    if STATUS_FILE.exists():
        try:
            with STATUS_FILE.open("r", encoding="utf-8") as f:
                last_status = json.load(f)
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ status.json")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å status.json: {e}")
            last_status = {}
    else:
        last_status = {}


def save_status():
    try:
        with STATUS_FILE.open("w", encoding="utf-8") as f:
            json.dump(last_status, f, ensure_ascii=False, indent=2)
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ status.json")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ status.json: {e}")


async def check_tariffs():
    global last_status
    while True:
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
            data = await fetch_tariffs()
            filtered = filter_tariffs(data)

            current_status = {tariff_key(t): t["availability"] for t in filtered}

            messages = []
            for key, avail in current_status.items():
                prev_avail = last_status.get(key)
                t = next(t for t in filtered if tariff_key(t) == key)

                if prev_avail is None and avail:
                    # –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω
                    messages.append(f"üöÄ –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω:\n{format_tariff(t)}")
                elif prev_avail is not None and prev_avail != avail:
                    # –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å
                    status_str = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if avail else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    messages.append(f"‚ö° –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞ {status_str}:\n{format_tariff(t)}")

            if messages:
                msg = "\n\n".join(messages) + "\n\nüîó GitHub: https://github.com/fxfuren"
                await bot.send_message(CHAT_ID, msg)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(messages)} –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö/–Ω–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")

            last_status = current_status
            save_status()

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


async def run_bot():
    global _check_task
    load_status()

    # –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç, —á—Ç–æ –±–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
    try:
        await bot.send_message(CHAT_ID, "üü¢ Play2Go Tariff Bot –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤.")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if _check_task is None or _check_task.done():
        _check_task = asyncio.create_task(check_tariffs())
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_tariffs –∑–∞–ø—É—â–µ–Ω–∞.")
    else:
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ–≤–∞—è –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è.")

    await dp.start_polling(bot)
